import vk_api
from vk_api.bot_longpoll import VkBotLongPoll, VkBotEventType
import random
import requests
import json
import re
import datetime
from bs4 import BeautifulSoup as BS
def get_wheather(city):
    appid = 'ab2ede76dd714722a2183f3c570b2618'
    week = requests.get('http://api.openweathermap.org/data/2.5/weather',
                        params={'q': city, 'units': 'metric', 'lang': 'ru', 'APPID': appid})
    weather = json.loads(week.text)
    print(week.text)
    wher = ''
    try:
        wher = '–°—Ç—Ä–∞–Ω–∞: ' + weather["sys"]["country"] + '\n–ì–æ—Ä–æ–¥: ' + weather["name"] + '\n–ü–æ–≥–æ–¥–∞: ' + \
               weather["weather"][0]["description"] + '\nüå°Ô∏è –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: ' + str(
            weather["main"]["temp"]) + ' ¬∞C, –æ—â—É—â–∞–µ—Ç—Å—è –∫–∞–∫ ' + str(
            weather["main"]["feels_like"]) + " ¬∞C" + "\n üíß –í–ª–∞–∂–Ω–æ—Å—Ç—å: " + str(
            weather['main']['humidity']) + "%\n üí® –°–∫–æ—Ä–æ—Å—Ç—å –≤–µ—Ç—Ä–∞: " + str(
            weather['wind']['speed']) + '\n ‚òÄ –†–∞—Å—Å–≤–µ—Ç: ' + datetime.datetime.fromtimestamp(
            weather["sys"]["sunrise"]).strftime('%H:%M:%S') + '\n üåë –ó–∞–∫–∞—Ç: ' + datetime.datetime.fromtimestamp(
            weather["sys"]["sunset"]).strftime('%H:%M:%S')
    except:
        wher = '–ù–µ—Ç —Ç–∞–∫–æ–≥–æ –≥–æ—Ä–æ–¥–∞'
    return wher
def group_schedule_exam(group_num):
    url = 'https://journal.bsuir.by/api/v1/studentGroup/schedule?studentGroup=' + group_num
    string = ''
    try:
        r = requests.get(url)
        all_shedule = json.loads(r.text)
        for exam in all_shedule['examSchedules']:
            days=exam['weekDay'].split('.')
            times=exam['schedule'][0]['startLessonTime'].split(':')
            start=datetime.datetime(int(days[2]), int(days[1]),int(days[0]), int(times[0]), int(times[0]))
            now=datetime.datetime.now()
            delay=start-now
            lessday=datetime.timedelta(seconds=delay.seconds)
            string+=exam['weekDay']+' c '+exam['schedule'][0]['startLessonTime']+' –ø–æ '+exam['schedule'][0]['endLessonTime']+'\n'+exam['schedule'][0]['lessonType']+' –ø–æ '+exam['schedule'][0]['subject']+' –≤ –∞—É–¥–∏—Ç–æ—Ä–∏–∏ '+exam['schedule'][0]['auditory'][0]+'\n –ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å: '+exam['schedule'][0]['employee'][0]['fio']+\
                    '\n'+'–û—Å—Ç–∞–ª–æ—Å—å: '+str(delay.days)+' –¥–Ω. '+str(datetime.timedelta(seconds=delay.seconds))+'\n\n'
        if string=='':
            string='–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –µ—â–µ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ'
    except Exception as e:
        print(e)
        string = '–¢–∞–∫–æ–π –≥—Ä—É–ø–ø—ã –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç'
    finally:
        return string
def group_schedule(group_num):
    url = 'https://journal.bsuir.by/api/v1/studentGroup/schedule?studentGroup=' + group_num
    string = ''
    try:
        r = requests.get(url)
        url = 'http://journal.bsuir.by/api/v1/week'
        week = requests.get(url)
        print(week.text)
        tasd = json.loads(r.text)
        for day in tasd['schedules']:
            string += day['weekDay'] + ':\n\r'
            for key in day['schedule']:
                for weekN in key['weekNumber']:
                    if weekN == int(week.text):
                        if len(key['auditory']) == 0:
                            key['auditory'].append('')
                        group = {
                            0: '–í—Å—è –≥—Ä—É–ø–ø–∞',
                            1: '–ü–µ—Ä–≤–∞—è –ø–æ–¥–≥—Ä—É–ø–ø–∞',
                            2: '–í—Ç–æ—Ä–∞—è –ø–æ–¥–≥—Ä—É–ø–ø–∞'
                        }
                        string += key['subject'] + ' ' + group[key['numSubgroup']] + ' ' + key['lessonType'] + ' ' + \
                                  key[
                                      'lessonTime'] + ' ' + key['auditory'][0] + '\n\r'
            string += '\n\r'
    except:
        string = '–¢–∞–∫–æ–π –≥—Ä—É–ø–ø—ã –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç'
    finally:
        return string
def schedule_day(x, group_num):
    url = 'https://journal.bsuir.by/api/v1/studentGroup/schedule?studentGroup=' + group_num
    try:
        r = requests.get(url)
        url = 'http://journal.bsuir.by/api/v1/week'
        week = requests.get(url)
        tasd = json.loads(r.text)
        week_days = {
            0: '–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫',
            1: '–í—Ç–æ—Ä–Ω–∏–∫',
            2: '–°—Ä–µ–¥–∞',
            3: '–ß–µ—Ç–≤–µ—Ä–≥',
            4: '–ü—è—Ç–Ω–∏—Ü–∞',
            5: '–°—É–±–±–æ—Ç–∞',
            6: '–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ'
        }
        week_day = week_days[(datetime.datetime.now().weekday() + x) % 7]
        string = ''
        if (week_day != '–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ'):
            for day in tasd['schedules']:
                if (day['weekDay'] == week_day):
                    string += day['weekDay'] + ':\n\r'
                    for key in day['schedule']:
                        for weekN in key['weekNumber']:
                            if weekN == int(week.text):
                                if len(key['auditory']) == 0:
                                    key['auditory'].append('')
                                group = {
                                    0: '–í—Å—è –≥—Ä—É–ø–ø–∞',
                                    1: '–ü–µ—Ä–≤–∞—è –ø–æ–¥–≥—Ä—É–ø–ø–∞',
                                    2: '–í—Ç–æ—Ä–∞—è –ø–æ–¥–≥—Ä—É–ø–ø–∞'
                                }
                                string += key['subject'] + ' ' + group[key['numSubgroup']] + ' ' + key['lessonType'] + ' ' + \
                                          key[
                                              'lessonTime'] + ' ' + key['auditory'][0] + '\n\r'
            return string
        else:
            string='–í—ã—Ö–æ–¥–Ω–æ–π üòé'
    except:
        string = '–¢–∞–∫–æ–π –≥—Ä—É–ø–ø—ã –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç'
    finally:
        return string
def schedule(group_num):
    url = 'https://journal.bsuir.by/api/v1/studentGroup/schedule?studentGroup=' + group_num
    try:
        r = requests.get(url)
        url = 'http://journal.bsuir.by/api/v1/week'
        week = requests.get(url)
        print(week.text)
        tasd = json.loads(r.text)
        string = ''
        for day in tasd['schedules']:
            string += day['weekDay'] + ':\n\r'
            for key in day['schedule']:
                for weekN in key['weekNumber']:
                    if weekN == int(week.text):
                        if len(key['auditory']) == 0:
                            key['auditory'].append('')
                        group = {
                            0: '–í—Å—è –≥—Ä—É–ø–ø–∞',
                            1: '–ü–µ—Ä–≤–∞—è –ø–æ–¥–≥—Ä—É–ø–ø–∞',
                            2: '–í—Ç–æ—Ä–∞—è –ø–æ–¥–≥—Ä—É–ø–ø–∞'
                        }
                        string += key['subject'] + ' ' + group[key['numSubgroup']] + ' ' + key['lessonType'] + ' ' + key[
                            'lessonTime'] + ' ' + key['auditory'][0] + '\n\r'
            string += '\n\r'
        return string
    except:
        string = '–¢–∞–∫–æ–π –≥—Ä—É–ø–ø—ã –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç'
    finally:
        return string
def schedule_curday(day_name, group_num):
    url = 'https://journal.bsuir.by/api/v1/studentGroup/schedule?studentGroup=' + group_num
    try:
        r = requests.get(url)
        url = 'http://journal.bsuir.by/api/v1/week'
        week = requests.get(url)
        tasd = json.loads(r.text)
        string = ''
        day_name = day_name[0:-1]
        if (day_name != '–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å'):
            for day in tasd['schedules']:
                if (day['weekDay'][0:-1].lower() == day_name):
                    string += day['weekDay'] + ':\n\r'
                    for key in day['schedule']:
                        for weekN in key['weekNumber']:
                            if weekN == int(week.text):
                                if len(key['auditory']) == 0:
                                    key['auditory'].append('')
                                group = {
                                    0: '–í—Å—è –≥—Ä—É–ø–ø–∞',
                                    1: '–ü–µ—Ä–≤–∞—è –ø–æ–¥–≥—Ä—É–ø–ø–∞',
                                    2: '–í—Ç–æ—Ä–∞—è –ø–æ–¥–≥—Ä—É–ø–ø–∞'
                                }
                                string += key['subject'] + ' ' + group[key['numSubgroup']] + ' ' + key['lessonType'] + ' ' + \
                                          key[
                                              'lessonTime'] + ' ' + key['auditory'][0] + '\n\r'
                    break
            if (string == ''):
                string='–ù–µ—Ç —Ç–∞–∫–æ–≥–æ –¥–Ω—è –Ω–µ–¥–µ–ª–∏'
        else:
            string='–í—ã—Ö–æ–¥–Ω–æ–π üòé'
    except:
        string = '–¢–∞–∫–æ–π –≥—Ä—É–ø–ø—ã –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç'
    finally:
        return string
def send_schedule(den):
    mess = "–û—à–∏–±–æ—á–∫–∞"
    if den[0][0] == '':
        group_num = "851002"
    else:
        group_num = den[0][0]
    if (den[0][1] == '–∑–∞–≤—Ç—Ä–∞'):
        mess = schedule_day(1, group_num)
    elif (den[0][1] == '—Å–µ–≥–æ–¥–Ω—è'):
        mess = schedule_day(0, group_num)
    elif (den[0][1] == '–Ω–µ–¥–µ–ª—é'):
        mess = schedule(group_num)
    else:
        mess = schedule_curday(den[0][1], group_num)
    return mess
def main():
    bot_session = vk_api.VkApi(
        token="7e7f19b864480ef7eaaba0ad822b5f661cebbc4ce9bd43c64aa65610392d54f0eef71f1f628bde8a4ef31")
    bot_api = bot_session.get_api()
    longpoll = VkBotLongPoll(bot_session, 192798565)
    for event in longpoll.listen():
        if event.type == VkBotEventType.MESSAGE_NEW:
            print('–ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ')
            print(event.message.from_id)
            print(event.message.peer_id)
            print(event.message.text)
            print(event.message.attachments)
            message_text = re.sub(r"\[club192798565\|[@\w\s]+\]",'',event.obj.message['text']).strip()
            print(message_text)
            rofl=str(message_text[-2:])
            if rofl.lower()=='–¥–∞':
                bot_api.messages.send(
                    random_id=random.random(),
                    peer_id=event.obj.message['peer_id'],
                    message='–ü–∏–∑–¥–∞'
                )
            ras_day = re.findall(r"—ç–∫–∑–∞–º–µ–Ω—ã ([0-9]*)", message_text.lower())
            if len(ras_day):
                bot_api.messages.send(random_id=random.random(), peer_id=event.message.peer_id, message=group_schedule_exam(ras_day[0]))
            ras_day = re.findall(r"—Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ ([0-9]*)[\s]*–Ω–∞ ([–∞-—è]+)", message_text.lower())
            if len(ras_day):
                bot_api.messages.send(random_id=random.random(), peer_id=event.message.peer_id, message=send_schedule(ras_day))
            if message_text.lower() == '–≤—Å—Ç–∞–≤–∞–π':
                bot_api.messages.send(
                    random_id=random.random(),
                    peer_id=event.obj.message['peer_id'],
                    sticker_id='8916'
                )
            ras_day = re.findall(r"–ø–æ–≥–æ–¥–∞ ([\w\- ]+)", message_text.lower())
            if len(ras_day):
                    bot_api.messages.send(
                        random_id=random.random(),
                        peer_id=event.obj.message['peer_id'],
                        message=get_wheather(ras_day[0])
                    )
            if message_text.lower() == '–∫–æ—Ä–æ–Ω–∞–≤–∏—Ä—É—Å':
                url = 'https://www.worldometers.info/coronavirus'
                r = requests.get(url)
                html = BS(r.text, 'html.parser')
                znach = html.findAll("div", id="maincounter-wrap")
                cases = re.search(r"[0-9]+(,[0-9]+)+", str(znach[0]))
                deaths = re.search(r"[0-9]+(,[0-9]+)+", str(znach[1]))
                recovered = re.search(r"[0-9]+(,[0-9]+)+", str(znach[2]))
                bot_api.messages.send(
                    random_id=random.random(),
                    peer_id=event.obj.message['peer_id'],
                    message='Cases: ' + cases[0] + '\n\rDeaths: ' + deaths[0] + '\n\rRecovered ' + recovered[0],
                )
            country = re.findall(r"[–∫–ö]–æ—Ä–æ–Ω–∞–≤–∏—Ä—É—Å –≤ ([A-z]+)", message_text)
            if len(country):
                print(country)
                url = 'https://www.worldometers.info/coronavirus'
                r = requests.get(url)
                html = BS(r.text, 'html.parser')
                total_cases = "None"
                total_deaths = "None"
                total_recovered = "None"
                new_cases = "None"
                new_deaths = "None"
                recovered = "None"
                znach = html.findAll("tr")
                flag = False
                for i in znach:
                    match = re.search(r">(" + country[0] + ")<", str(i))
                    if match:
                        znach2 = re.findall(r"(>(\+*[\s]*([0-9]+(,[0-9]+)*))[\s]*<)|(></td>)", str(i))
                        flag = True
                        if znach2[1][1] != "":
                            total_cases = znach2[1][1]
                        if znach2[2][1] != "":
                            new_cases = znach2[2][1]
                        if znach2[3][1] != "":
                            total_deaths = znach2[3][1]
                        if znach2[4][1] != "":
                            new_deaths = znach2[4][1]
                        if znach2[5][1] != "":
                            recovered = znach2[5][1]
                        bot_api.messages.send(
                            random_id=random.random(),
                            peer_id=event.obj.message['peer_id'],
                            message='Country:' + country[
                                0] + '\n\rü§íTotal cases: ' + total_cases + '\n\rNew cases: ' + new_cases + '\n\r‚ò†Total deaths: ' + total_deaths + '\n\rNew deaths: ' + new_deaths + '\n\rüòÅRecovered: ' + recovered,
                        )
                        break
                if not flag:
                    bot_api.messages.send(
                        random_id=random.random(),
                        peer_id=event.obj.message['peer_id'],
                        message='–ù–µ—Ç —Ç–∞–∫–æ–π —Å—Ç—Ä–∞–Ω—ã',
                    )
            horoscope = re.findall(r"[–ì|–≥]–æ—Ä–æ—Å–∫–æ–ø ([–ê-—è]+) –Ω–∞ ([–ê-—è]+)", message_text)
            if len(horoscope):
                day=horoscope[0][1].lower()
                sign=horoscope[0][0].lower()
                if sign=='–ø–∏–¥–∞—Ä–∞—Å':
                    bot_api.messages.send(
                        random_id=random.random(),
                        peer_id=event.obj.message['peer_id'],
                        message='–°–∞–º —Ç—ã –ø–∏–¥–∞—Ä–∞—Å'
                    )
                link = {
                    '—Ä—ã–±—ã': 'https://1001goroskop.ru/?znak=pisces',
                    '–æ–≤–µ–Ω': 'https://1001goroskop.ru/?znak=aries',
                    '—Ç–µ–ª–µ—Ü': 'https://1001goroskop.ru/?znak=taurus',
                    '–±–ª–∏–∑–Ω–µ—Ü—ã': 'https://1001goroskop.ru/?znak=gemini',
                    '—Ä–∞–∫': 'https://1001goroskop.ru/?znak=cancer',
                    '–ª–µ–≤': 'https://1001goroskop.ru/?znak=leo',
                    '–¥–µ–≤–∞': 'https://1001goroskop.ru/?znak=virgo',
                    '–≤–µ—Å—ã': 'https://1001goroskop.ru/?znak=libra',
                    '—Å–∫–æ—Ä–ø–∏–æ–Ω': 'https://1001goroskop.ru/?znak=scorpio',
                    '—Å—Ç—Ä–µ–ª–µ—Ü': 'https://1001goroskop.ru/?znak=sagittarius',
                    '–∫–æ–∑–µ—Ä–æ–≥': 'https://1001goroskop.ru/?znak=capricorn',
                    '–≤–æ–¥–æ–ª–µ–π': 'https://1001goroskop.ru/?znak=aquarius',
                }
                try:
                    url=link[sign]
                    if (day=='–Ω–µ–¥–µ–ª—é'):
                        url += '&kn=week'
                        r = requests.get(url)
                        html = BS(r.text, 'html.parser')
                        znach = html.findAll("i")
                        prognoz = str(znach[0])
                        prognoz = prognoz.replace('<i>', '')
                        prognoz = prognoz.replace('</i>', '')
                        prognoz += '\n'
                        znach1 = html.findAll(attrs={'class':re.compile("date")})
                        znach2 = html.findAll("p")
                        print(znach1)
                        print(znach2)
                        for i in range(7):
                            print(znach1[i+1])
                            prognoz += str(znach1[i+1])
                            prognoz = prognoz.replace('<div class="date">', '')
                            prognoz = prognoz.replace('</div>', '')
                            prognoz += '\n'
                            prognoz += str(znach2[i])
                            prognoz = prognoz.replace('<p>', '')
                            prognoz = prognoz.replace('</p>', '')
                            prognoz += '\n'
                        bot_api.messages.send(
                            random_id=random.random(),
                            peer_id=event.obj.message['peer_id'],
                            message=prognoz
                        )
                    else:
                        if (day=='–∑–∞–≤—Ç—Ä–∞'):
                            url+='&kn=tomorrow'
                        r = requests.get(url)
                        html = BS(r.text, 'html.parser')
                        znach = html.findAll("i")
                        prognoz = str(znach[0])
                        prognoz = prognoz.replace('<i>', '')
                        prognoz = prognoz.replace('</i>', '')
                        znach = html.findAll("p")
                        prognoz+="\n"+str(znach[0])
                        prognoz = prognoz.replace('<p>', '')
                        prognoz = prognoz.replace('</p>', '')
                        bot_api.messages.send(
                            random_id=random.random(),
                            peer_id=event.obj.message['peer_id'],
                            message=prognoz
                        )
                except KeyError:
                    bot_api.messages.send(
                        random_id=random.random(),
                        peer_id=event.obj.message['peer_id'],
                        message='–¢–∞–∫–æ–≥–æ –∑–Ω–∞–∫–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç'
                    )
            if message_text.lower() == '–∫—Ç–æ –ø–∏–¥–æ—Ä':
                hahaha = bot_api.messages.getConversationMembers(
                    peer_id=event.message.peer_id
                )
                print(hahaha)
                pidr = random.randint(0, len(hahaha['profiles']) - 1)
                print(pidr)
                bot_api.messages.send(
                    random_id=random.random(),
                    peer_id=event.obj.message['peer_id'],
                    message='[id' + str(hahaha['profiles'][pidr]['id']) + '|–ü–∏–¥–æ—Ä]'
                )
            if message_text.lower()=='—Å–¥–µ–ª–∞–π –æ—á–µ—Ä–µ–¥—å':
                prof_info = bot_api.messages.getConversationMembers(
                    peer_id=event.message.peer_id
                )
                print(prof_info)
                chil_numb = list(range(0, len(prof_info['profiles'])))
                random.shuffle(chil_numb)
                queue='–û—á–µ—Ä–µ–¥—å\n'
                j=0
                for i in chil_numb:
                    j+=1
                    queue+=str(j)+'.[id'+str(prof_info['profiles'][i]['id'])+'|'+prof_info['profiles'][i]['first_name']+' '+prof_info['profiles'][i]['last_name']+']\n'
                bot_api.messages.send(
                    random_id=random.random(),
                    peer_id=event.obj.message['peer_id'],
                    message=queue
                )
if __name__ == '__main__':
    main()